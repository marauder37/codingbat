{
  "alarm_clock": "def alarm_clock(day, vacation):\n  if day in [0, 6]:\n    if vacation:\n      return \"off\"\n    return \"10:00\"\n  if vacation:\n    return \"10:00\"\n  return \"7:00\"",
  "array123": "def array123(nums):\n  return len([True for i in range(len(nums)) if nums[i:i+3] == [1, 2, 3]]) > 0",
  "array_count9": "def array_count9(nums):\n  return len([i for i in nums if i == 9])",
  "array_front9": "def array_front9(nums):\n  return len([i for i in nums[:4] if i == 9]) > 0",
  "big_diff": "def big_diff(nums):\n  nums.sort()\n  return nums[-1] - nums[0]",
  "cat_dog": "def cat_dog(str):\n  return str.count(\"cat\") == str.count(\"dog\")",
  "caught_speeding": "def caught_speeding(speed, is_birthday):\n  if speed <= 60 or is_birthday and speed <= 65:\n    return 0\n  if speed <= 80 or is_birthday and speed <= 85:\n    return 1\n  return 2",
  "centered_average": "def centered_average(nums):\n  nums.sort()\n  return sum(nums[1:-1]) / len(nums[1:-1])",
  "cigar_party": "def cigar_party(cigars, is_weekend):\n  return 40 <= cigars <= 60 or is_weekend and 40 <= cigars",
  "close_far": "def close_far(a, b, c):\n  c1 = abs(b-a) <= 1 and abs(c-a) > 1 and abs(c-b) > 1\n  c2 = abs(c-a) <= 1 and abs(b-a) > 1 and abs(b-c) > 1\n  return c1 or c2",
  "combo_string": "def combo_string(a, b):\n  if len(a) < len(b):\n    return a + b + a\n  return b + a + b",
  "common_end": "def common_end(a, b):\n  return a[0] == b[0] or a[-1] == b[-1]",
  "count_code": "def count_code(str):\n  return [True for i in range(len(str)) if str[i:i+2] == \"co\" and str[i+3:i+4] == \"e\"].count(True)",
  "count_evens": "def count_evens(nums):\n  return len([n for n in nums if not n % 2])",
  "count_hi": "def count_hi(str):\n  return str.count(\"hi\")",
  "date_fashion": "def date_fashion(you, date):\n  if you <= 2 or date <= 2:\n    return 0\n  if you >= 8 or date >= 8:\n    return 2\n  return 1",
  "diff21": "def diff21(n):\n  if n > 21:\n    return abs(n - 21) * 2\n  return abs(n - 21)",
  "double_char": "def double_char(str):\n  return \"\".join([c * 2 for c in str])",
  "end_other": "def end_other(a, b):\n  return a.lower().endswith(b.lower()) or b.lower().endswith(a.lower())",
  "extra_end": "def extra_end(str):\n  return str[-2:] * 3",
  "first_half": "def first_half(str):\n  return str[:len(str)/2]",
  "first_last6": "def first_last6(nums):\n  return nums[0] == 6 or nums[-1] == 6",
  "first_two": "def first_two(str):\n  return str[:2]",
  "front3": "def front3(str):\n  return str[:3] * 3",
  "front_back": "def front_back(str):\n  if len(str) == 1:\n    return str\n  return str[-1:-2:-1] + str[1:-1] + str[0:1]",
  "front_times": "def front_times(str, n):\n  return str[:3] * n",
  "has22": "def has22(nums):\n  return [nums[i:i+2] == [2, 2] for i in range(len(nums))].count(True) > 0",
  "has23": "def has23(nums):\n  return 2 in nums or 3 in nums",
  "hello_name": "def hello_name(name):\n  return \"Hello {}!\".format(name)",
  "in1to10": "def in1to10(n, outside_mode):\n  if outside_mode:\n    return not 1 < n < 10\n  return 1 <= n <= 10",
  "last2": "def last2(str):\n  return sum(str[i:-1].startswith(str[-2:]) for i in range(len(str)))",
  "left2": "def left2(str):\n  return str[2:] + str[:2]",
  "lone_sum": "def lone_sum(a, b, c):\n  if a == b == c:\n    return 0\n  if a == b:\n    return c\n  if b == c:\n    return a\n  if a == c:\n    return b\n  return a + b + c",
  "love6": "def love6(a, b):\n  return a == 6 or b == 6 or a + b == 6 or abs(a - b) == 6",
  "lucky_sum": "def lucky_sum(a, b, c):\n  sum = 0\n  for n in [a, b, c]:\n    if n == 13:\n      return sum\n    sum += n\n  return sum",
  "make_abba": "def make_abba(a, b):\n  return a + b + b + a",
  "make_bricks": "def make_bricks(small, big, goal):\n  big_used = min(goal / 5, big)\n  small_needed = goal - (big_used * 5)\n  return small_needed <= small",
  "make_chocolate": "def make_chocolate(small, big, goal):\n  big_used = min(goal / 5, big)\n  small_needed = goal - (big_used * 5)\n  if small_needed <= small:\n    return small_needed\n  return -1",
  "make_ends": "def make_ends(nums):\n  return [nums[0], nums[-1]]",
  "make_out_word": "def make_out_word(out, word):\n  return out[:2] + word + out[2:]",
  "make_pi": "def make_pi():\n  return [3, 1, 4]",
  "make_tags": "def make_tags(tag, word):\n  return \"<{}>{}</{}>\".format(tag, word, tag)",
  "makes10": "def makes10(a, b):\n  return a == 10 or b == 10 or a + b == 10",
  "max_end3": "def max_end3(nums):\n  return [max(nums[0], nums[-1])] * 3",
  "middle_way": "def middle_way(a, b):\n  return [a[1], b[1]]",
  "missing_char": "def missing_char(str, n):\n  return str[:n] + str[n+1:]",
  "monkey_trouble": "def monkey_trouble(a_smile, b_smile):\n  return a_smile and b_smile or not a_smile and not b_smile",
  "near_hundred": "def near_hundred(n):\n  return 90 <= n <= 110 or 190 <= n <= 210",
  "near_ten": "def near_ten(num):\n  return num % 10 <= 2 or num % 10 >= 8",
  "no_teen_sum": "def no_teen_sum(a, b, c):\n  return sum(fix_teen(n) for n in [a, b, c])\n    \ndef fix_teen(n):\n  if 13 <= n < 15 or 16 < n <= 19:\n    return 0\n  return n",
  "non_start": "def non_start(a, b):\n  return a[1:] + b[1:]",
  "not_string": "def not_string(str):\n  if str.startswith(\"not\"):\n    return str\n  return \"not \" + str",
  "parrot_trouble": "def parrot_trouble(talking, hour):\n  return talking and (hour < 7 or hour > 20)",
  "pos_neg": "def pos_neg(a, b, negative):\n  if negative:\n    return a < 0 and b < 0\n  return a < 0 and b > 0 or a > 0 and b < 0",
  "reverse3": "def reverse3(nums):\n  return nums[-1::-1]",
  "rotate_left3": "def rotate_left3(nums):\n  return nums[1:] + nums[:1]",
  "round_sum": "def round_sum(a, b, c):\n  return sum(round10(n) for n in [a, b, c])\n    \ndef round10(n):\n  rem = n % 10\n  if rem >= 5:\n    return n + (10 - rem)\n  return n - rem",
  "same_first_last": "def same_first_last(nums):\n  return len(nums) > 0 and nums[0] == nums[-1]",
  "sleep_in": "def sleep_in(weekday, vacation):\n  return not weekday or vacation",
  "sorta_sum": "def sorta_sum(a, b):\n  if 10 <= a + b <= 19:\n    return 20\n  return a + b",
  "squirrel_play": "def squirrel_play(temp, is_summer):\n  if is_summer:\n    return 60 <= temp <= 100\n  return 60 <= temp <= 90",
  "string_bits": "def string_bits(str):\n  return str[0:len(str):2]",
  "string_match": "def string_match(a, b):\n  return [a[i:i+2] == b[i:i+2] for i in range(len(a)-1)].count(True)",
  "string_splosion": "def string_splosion(str):\n  splode = \"\"\n  for i in range(len(str)):\n    splode += str[:i+1]\n  return splode",
  "string_times": "def string_times(str, n):\n  return str * n",
  "sum13": "def sum13(nums):\n  sum = 0\n  skip = False\n  for n in nums:\n    if n == 13:\n      skip = True\n      continue\n    if skip:\n      skip = False\n      continue\n    sum += n\n  return sum",
  "sum2": "def sum2(nums):\n  return sum(nums[0:2])",
  "sum3": "def sum3(nums):\n  return sum(nums)",
  "sum67": "def sum67(nums):\n  sum = 0\n  skip = False\n  for n in nums:\n    if n == 6:\n      skip = True\n      continue\n    if skip and n == 7:\n      skip = False\n      continue\n    if skip:\n      continue\n    sum += n\n  return sum",
  "sum_double": "def sum_double(a, b):\n  if a == b:\n    return 4 * a\n  return a + b",
  "without_end": "def without_end(str):\n  return str[1:-1]",
  "xyz_there": "def xyz_there(str):\n  return len([True for i in range(-1, len(str)) if str[i:i+1] != \".\" and str[i+1:i+4] == \"xyz\"]) > 0"
}